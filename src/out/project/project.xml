<exportedData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="commander.xsd" version="61" buildLabel="build_4.2_77824_2014.09.27_02:09:10" buildVersion="4.2.6.77824" passkey="a30cbf89cfdae202c5227ce40fe867512295566d">
  <exportPath>/projects/EC-Support</exportPath>
  <project>
    <projectName>EC-Support</projectName>
    <description>Interaction with Support</description>
    <resourceName />
    <workspaceName />
    <propertySheet>
      <property>
        <propertyName>ec_visibility</propertyName>
        <expandable>1</expandable>
        <value>pickListOnly</value>
      </property>
      <property>
        <propertyName>pluginBuildNumber</propertyName>
        <expandable>1</expandable>
        <value>5</value>
      </property>
      <property>
        <propertyName>version</propertyName>
        <description />
        <expandable>1</expandable>
        <value>1.0.0</value>
      </property>
    <property><propertyName>ec_setup</propertyName><value># Data that drives the create step picker registration for this plugin.
@::createStepPickerSteps = ();
</value></property><property><propertyName>project_version</propertyName><value>1.0.0.5</value></property></propertySheet>
    <procedure>
      <procedureName>openSupportTicket</procedureName>
      <description>A procedure to automatically open a ticket on Zendesk and deliver the required logs to ShareFile</description>
      <jobNameTemplate />
      <resourceName>local</resourceName>
      <timeLimit />
      <timeLimitUnits>minutes</timeLimitUnits>
      <workspaceName />
      <propertySheet>
        <property>
          <propertyName>ec_customEditorData</propertyName>
          <propertySheet>
            <property>
              <propertyName>parameters</propertyName>
              <propertySheet>
                <property>
                  <propertyName>agents</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>jobNumber</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>product</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>options</propertyName>
                      <propertySheet>
                        <property>
                          <propertyName>option1</propertyName>
                          <propertySheet>
                            <property>
                              <propertyName>text</propertyName>
                              <expandable>1</expandable>
                              <value>ElectricCommander</value>
                            </property>
                            <property>
                              <propertyName>value</propertyName>
                              <expandable>1</expandable>
                              <value>electriccommander</value>
                            </property>
                          </propertySheet>
                        </property>
                        <property>
                          <propertyName>option2</propertyName>
                          <propertySheet>
                            <property>
                              <propertyName>text</propertyName>
                              <expandable>1</expandable>
                              <value>ElectricFlow</value>
                            </property>
                            <property>
                              <propertyName>value</propertyName>
                              <expandable>1</expandable>
                              <value>electricflow</value>
                            </property>
                          </propertySheet>
                        </property>
                        <property>
                          <propertyName>optionCount</propertyName>
                          <expandable>1</expandable>
                          <value>2</value>
                        </property>
                        <property>
                          <propertyName>type</propertyName>
                          <expandable>1</expandable>
                          <value>list</value>
                        </property>
                      </propertySheet>
                    </property>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>stepId</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>ticketDescription</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>ticketTitle</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>time</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>version</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
              </propertySheet>
            </property>
          </propertySheet>
        </property>
      </propertySheet>
      <formalParameter>
        <formalParameterName>agents</formalParameterName>
        <defaultValue />
        <description>a commas separated list of agents. Will be used to get the logs from the agents involved in the issue</description>
        <expansionDeferred>0</expansionDeferred>
        <required>0</required>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>jobNumber</formalParameterName>
        <defaultValue />
        <description>The ID of the job that generated the error. Will be used to collect the right logs</description>
        <expansionDeferred>0</expansionDeferred>
        <required>0</required>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>product</formalParameterName>
        <defaultValue>electriccommander</defaultValue>
        <description>the name of the product that failed</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <type>select</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>ticketDescription</formalParameterName>
        <defaultValue />
        <description>The main description of the issue you are facing</description>
        <expansionDeferred>0</expansionDeferred>
        <required>0</required>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>ticketTitle</formalParameterName>
        <defaultValue />
        <description />
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>time</formalParameterName>
        <defaultValue />
        <description>The time at which the issue happened. Used to collect the right logs. If empty, will simply send the commander.log</description>
        <expansionDeferred>0</expansionDeferred>
        <required>0</required>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>version</formalParameterName>
        <defaultValue />
        <description>product version</description>
        <expansionDeferred>0</expansionDeferred>
        <required>0</required>
        <type>entry</type>
      </formalParameter>
      <step>
        <stepName>fakeTicket</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>ectool setProperty "/myJob/zendesk/ticketId" --value "123456"
</command>
        <condition />
        <description />
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName />
        <parallel>0</parallel>
        <postProcessor />
        <precondition />
        <releaseMode>none</releaseMode>
        <resourceName />
        <shell />
        <timeLimit />
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory />
        <workspaceName />
        <propertySheet>
        </propertySheet>
      </step>
      <step>
        <stepName>createTicket</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <condition>0</condition>
        <description>Open the ticket</description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <precondition />
        <releaseMode>none</releaseMode>
        <resourceName />
        <subprocedure>createTicket</subprocedure>
        <subproject>/plugins/EC-Zendesk/project</subproject>
        <timeLimit />
        <timeLimitUnits>minutes</timeLimitUnits>
        <workspaceName />
        <actualParameters>
          <property>
            <propertyName>product</propertyName>
            <expandable>1</expandable>
            <value>$[product]</value>
          </property>
          <property>
            <propertyName>ticketDescription</propertyName>
            <expandable>1</expandable>
            <value>$[ticketDescription]</value>
          </property>
          <property>
            <propertyName>ticketSubject</propertyName>
            <expandable>1</expandable>
            <value>$[ticketTitle]</value>
          </property>
          <property>
            <propertyName>zendeskURL</propertyName>
            <expandable>1</expandable>
            <value>https://electriccloud.zendesk.com/api/v2</value>
          </property>
        </actualParameters>
        <propertySheet>
        </propertySheet>
      </step>
      <step>
        <stepName>grabDestinationDir</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>#############################################################################
#
# Copyright Electric-Cloud 2015
#
#############################################################################
use Cwd;

$[/plugins[EC-Admin]project/scripts/perlHeaderJSON]

#############################################################################
#
# Global Variables
#
#############################################################################
my $cwd = getcwd();

$ec->setProperty("/myJob/destinationDirectory", "$cwd/$[/myJob/zendesk/ticketId]");
</command>
        <condition />
        <description />
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName />
        <parallel>0</parallel>
        <postProcessor />
        <precondition />
        <releaseMode>none</releaseMode>
        <resourceName />
        <shell>ec-perl</shell>
        <timeLimit />
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory />
        <workspaceName />
        <propertySheet>
        </propertySheet>
      </step>
      <step>
        <stepName>createTicketDirectory</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <condition />
        <description>create a directory to collect the logs</description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <precondition />
        <releaseMode>none</releaseMode>
        <resourceName>local</resourceName>
        <subprocedure>CreateDirectory</subprocedure>
        <subproject>/plugins/EC-FileOps/project</subproject>
        <timeLimit />
        <timeLimitUnits>minutes</timeLimitUnits>
        <workspaceName />
        <actualParameters>
          <property>
            <propertyName>Path</propertyName>
            <expandable>1</expandable>
            <value>$[/myJob/destinationDirectory]</value>
          </property>
        </actualParameters>
        <propertySheet>
        </propertySheet>
      </step>
      <step>
        <stepName>copyCommander.log</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <condition />
        <description>Copy the commander log into the folder</description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <precondition />
        <releaseMode>none</releaseMode>
        <resourceName>local</resourceName>
        <subprocedure>Copy</subprocedure>
        <subproject>/plugins/EC-FileOps/project</subproject>
        <timeLimit />
        <timeLimitUnits>minutes</timeLimitUnits>
        <workspaceName />
        <actualParameters>
          <property>
            <propertyName>destinationFile</propertyName>
            <expandable>1</expandable>
            <value>$[/myJob/destinationDirectory]</value>
          </property>
          <property>
            <propertyName>replaceDestinationIfPreexists</propertyName>
            <expandable>1</expandable>
            <value>1</value>
          </property>
          <property>
            <propertyName>sourceFile</propertyName>
            <expandable>1</expandable>
            <value>$[/server/Electric Cloud/dataDirectory]/logs/commander.log</value>
          </property>
        </actualParameters>
        <propertySheet>
        </propertySheet>
      </step>
      <step>
        <stepName>collectTimeBasedLogs</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>#############################################################################
#
# Copyright Electric-Cloud 2015
#
#############################################################################
use Time::Local;
use Cwd;

$[/plugins[EC-Admin]project/scripts/perlHeaderJSON]

#############################################################################
#
# Parameters
#
#############################################################################
my $timeString = "$[time]";

#############################################################################
#
# Global Variables
#
#############################################################################
my $DEBUG=1;
my $logDir="$[/server/Electric Cloud/dataDirectory]/logs";
my $cwd= getcwd();

my $serverEpochTime=convertTimeToEpoch($timeString);

opendir(LOG, $logDir) or die("Cannot open the log directory\n$!");

while (my $file = readdir(LOG)) {
    next if ($file !~ m/commander[\-\d.]*.log.zip/);
    # printf("Processing $file\n") if ($DEBUG);
    my $fileModificationTime = (stat("$logDir/$file"))[9];      # get modification time
    # printf("    time: %d\n", $fileModificationTime);
    if ($fileModificationTime >= $serverEpochTime) {
    	$ec->createJobStep({
        	subproject   => "/plugins/EC-FileOps/project",
            subprocedure => "Copy",
            jobStepName  => "Copy $file",
            actualParameter => [
            	{actualParameterName => 'sourceFile',      value => "$logDir/$file"},
            	{actualParameterName => 'destinationFile', value => "/$[/myJob/destinationDirectory]"},
            	{actualParameterName => 'replaceDestinationIfPreexists', value => 1},
            ],
        });
    }
}
closedir(LOG);


#############################################################################
#
# convertTime
# Time is of format 'MM/DD/YYYY 11:35:00' or 11:35:00 or 11:35
#############################################################################
sub convertTimeToEpoch {
    my $timeStr=shift @_;
    
    # Get passed time
    my($date, $time);

    if ($timeStr =~ m/\s+/) {
        ($date, $time)=split('\s+', $timeStr);
    } else {
        $time=$timeStr;
        $date="";
    }
    my ($year, $month, $day) = split(/[.\/\-]/, $date);
    my ($hour, $min, $sec)   = split(/[:]/, $time);

    printf("Incident time (original): %s-%s-%s %s:%s\n", $year, $month, $day, $hour, $min) if ($DEBUG);

    # get server time to fill missing values
    my $localTime = "$[/timestamp MM-dd-yyyy HH:mm]";
    my ($localMonth,$localDay,$localYear,$localHour,$localMinute) = split(/[\s\-:]+/, $localTime);

    printf("Local month: $localMonth\n") if ($DEBUG);
    $year = $localYear if ($year == 0);
    $year += 2000 if ($year &lt; 100);
    $month = $localMonth if ($month == 0);
    $day   = $localDay if ($day == 0);

    printf("Incident time: %s-%s-%s %s:%s\n", $year, $month, $day, $hour, $min) if ($DEBUG);
    my $time = timelocal(0,$min,$hour,$day,$month-1,$year);

    printf("Time of the incident: %s \n", $time) if ($DEBUG);
    return $time
}
    
</command>
        <condition>$[/javascript "$[time]" != "" ]</condition>
        <description>Collect the logs based on a time</description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName />
        <parallel>0</parallel>
        <postProcessor />
        <precondition />
        <releaseMode>none</releaseMode>
        <resourceName>local</resourceName>
        <shell>ec-perl</shell>
        <timeLimit />
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory />
        <workspaceName />
        <propertySheet>
        </propertySheet>
      </step>
      <step>
        <stepName>collectJobIdBasedLogs copy</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>#############################################################################
#
# Copyright Electric-Cloud 2015
#
#############################################################################
use Cwd;

$[/plugins[EC-Admin]project/scripts/perlHeaderJSON]

#############################################################################
#
# Parameters
#
#############################################################################
my $jobNumber = "$[jobNumber]";

#############################################################################
#
# Global Variables
#
#############################################################################
my $DEBUG=1;
my $logDir="$[/server/Electric Cloud/dataDirectory]/logs";
my $cwd= getcwd();

opendir(LOG, $logDir) or die("Cannot open the log directory\n$!");

while (my $file = readdir(LOG)) {
    next if ($file !~ m/commander[\-\d.]*.log.zip/);
    printf("Processing $file\n") if ($DEBUG);

my $exitCode=system("zgrep jobId=$jobNumber $logDir/$file 2>&amp;1");
    if ($exitCode == 0) {
    	printf("    Copying\n");
    	$ec->createJobStep({
        	subproject   => "/plugins/EC-FileOps/project",
            subprocedure => "Copy",
            jobStepName  => "Copy $file",
            actualParameter => [
            	{actualParameterName => 'sourceFile',      value => "$logDir/$file"},
            	{actualParameterName => 'destinationFile', value => "/$[/myJob/destinationDirectory]"},
            	{actualParameterName => 'replaceDestinationIfPreexists', value => 1},
            ],
        });
    }
}
closedir(LOG);


#############################################################################
#
# convertTime
# Time is of format 'MM/DD/YYYY 11:35:00' or 11:35:00 or 11:35
#############################################################################
sub convertTimeToEpoch {
    my $timeStr=shift @_;
    
    # Get passed time
    my($date, $time);

    if ($timeStr =~ m/\s+/) {
        ($date, $time)=split('\s+', $timeStr);
    } else {
        $time=$timeStr;
        $date="";
    }
    my ($year, $month, $day) = split(/[.\/\-]/, $date);
    my ($hour, $min, $sec)   = split(/[:]/, $time);

    printf("Incident time (original): %s-%s-%s %s:%s\n", $year, $month, $day, $hour, $min) if ($DEBUG);

    # get server time to fill missing values
    my $localTime = "$[/timestamp MM-dd-yyyy HH:mm]";
    my ($localMonth,$localDay,$localYear,$localHour,$localMinute) = split(/[\s\-:]+/, $localTime);

    printf("Local month: $localMonth\n") if ($DEBUG);
    $year = $localYear if ($year == 0);
    $year += 2000 if ($year &lt; 100);
    $month = $localMonth if ($month == 0);
    $day   = $localDay if ($day == 0);

    printf("Incident time: %s-%s-%s %s:%s\n", $year, $month, $day, $hour, $min) if ($DEBUG);
    my $time = timelocal(0,$min,$hour,$day,$month-1,$year);

    printf("Time of the incident: %s \n", $time) if ($DEBUG);
    return $time
}
    
</command>
        <condition>$[/javascript "$[jobNumber]" != "" ]</condition>
        <description>Collect the logs based on a time</description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName />
        <parallel>0</parallel>
        <postProcessor />
        <precondition />
        <releaseMode>none</releaseMode>
        <resourceName>local</resourceName>
        <shell>ec-perl</shell>
        <timeLimit />
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory />
        <workspaceName />
        <propertySheet>
        </propertySheet>
      </step>
      <step>
        <stepName>collectAgentLogs</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>#############################################################################
#
# Copyright Electric-Cloud 2015
#
#############################################################################
use Cwd;

$[/plugins[EC-Admin]project/scripts/perlHeaderJSON]

#############################################################################
#
# Parameters
#
#############################################################################
my $agentList = "$[agents]";

#############################################################################
#
# Global Variables
#
#############################################################################
my $DEBUG=1;
my $logDir="$[/server/Electric Cloud/dataDirectory]/logs";
my $cwd = getcwd();

foreach my $agent (sort split(",", $agentList)) {
	# run step on remote agent so we can get the installDir
    $ec->createJobStep({
        subproject   => "/plugins/EC-FileOps/project",
        subprocedure => "Remote Copy - Native",
        jobStepName  => "Copy $agent",
        resourceName => $agent,
        actualParameter => [
         	{actualParameterName => 'sourceWorkspaceName',      value => "default"},
          	{actualParameterName => 'sourceResourceName',       value => "$agent"},
            {actualParameterName => 'sourceFile',               value => $ENV{COMMANDER_DATA}."/logs/agent/*agent.log"},
          	{actualParameterName => 'destinationResourceName',  value => "local"},
           	{actualParameterName => 'destinationFile',          value => "$[/myJob/destinationDirectory]/$agent"},
           	{actualParameterName => 'destinationWorkspaceName', value => "default"},
           ],
    });
}

</command>
        <condition>$[/javascript "$[agents]" != "" ]</condition>
        <description>If agent list is not empty, go grab agent.log and jagent.log</description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName />
        <parallel>0</parallel>
        <postProcessor />
        <precondition />
        <releaseMode>none</releaseMode>
        <resourceName />
        <shell>ec-perl</shell>
        <timeLimit />
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory />
        <workspaceName />
        <propertySheet>
        </propertySheet>
      </step>
      <step>
        <stepName>createBundle</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <condition />
        <description>Zip the different files</description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <precondition />
        <releaseMode>none</releaseMode>
        <resourceName />
        <subprocedure>Create Zip File</subprocedure>
        <subproject>/plugins/EC-FileOps/project</subproject>
        <timeLimit />
        <timeLimitUnits>minutes</timeLimitUnits>
        <workspaceName />
        <actualParameters>
          <property>
            <propertyName>sourceFile</propertyName>
            <expandable>1</expandable>
            <value>$[/myJob/destinationDirectory]</value>
          </property>
          <property>
            <propertyName>zipFile</propertyName>
            <expandable>1</expandable>
            <value>$[/myJob/destinationDirectory].zip</value>
          </property>
        </actualParameters>
        <propertySheet>
        </propertySheet>
      </step>
    </procedure>
  </project>
</exportedData>